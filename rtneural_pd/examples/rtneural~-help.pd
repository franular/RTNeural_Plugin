#N canvas -6 -8 1060 632 12;
#X obj 455 81 osc~ 200;
#X floatatom 455 57 5 0 0 0 - - - 0;
#X obj 561 225 tgl 30 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X obj 506 159 *~ 1;
#X obj 531 97 hradio 30 1 0 2 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-neural_out 4410 float 0;
#X coords 0 1 4409 -1 200 100 1 0 0;
#X restore 34 348 graph;
#X obj 34 282 metro 100;
#X obj 34 256 loadbang;
#X obj 34 308 tabwrite~ \$0-neural_out;
#X obj 230 220 rtneural~ 1 1 44100;
#X msg 602 416 load_model ../../RTNeural_python/Automated-GuitarAmpModelling/GRU_Saw/GRU16c_RTNeural.json;
#X msg 561 284 bypass \$1;
#X floatatom 561 260 5 0 0 0 - - - 0;
#X text 454 37 input sine frequency;
#X obj 531 133 == 0;
#X obj 613 159 == 1;
#N canvas 32 102 450 300 loop 0;
#X obj 90 160 soundfiler;
#X obj 90 85 loadbang;
#N canvas 0 25 994 611 (subpatch) 0;
#X array \$0-loop 100000 float 2;
#X coords 0 1 100000 -1 250 100 1 0 0;
#X restore 160 30 graph;
#X obj 19 135 loadbang;
#X obj 19 185 tabplay~ \$0-loop;
#X obj 90 110 f \$0;
#X msg 90 135 read ../doc/sound/voice.wav \$1-loop;
#X obj 19 160 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 19 210 outlet~;
#X connect 1 0 5 0;
#X connect 3 0 7 0;
#X connect 4 0 8 0;
#X connect 4 1 7 0;
#X connect 5 0 6 0;
#X connect 6 0 0 0;
#X connect 7 0 4 0;
#X coords 0 0 1 1 85 60 0;
#X restore 549 159 pd loop;
#X obj 244 308 output~;
#X obj 588 185 *~ 0;
#X text 601 320 Load the model file at the given (relative or absolute) path. The model must satisfy [rtneural~]'s channel counts., f 61;
#X text 601 92 [rtneural~] expects an input signal of the declared channel count. This patch lets you choose between a sine wave (left cell) or speech sample (right cell).;
#N canvas 32 102 729 578 trigger_mode 0;
#X obj 184 354 tgl 30 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X msg 184 389 bypass \$1;
#X msg 186 189 load_model output/mlp_training_RTNeural.json;
#X obj 80 175 snake~ 3, f 10;
#X obj 211 83 noise~;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0-trig_array 10 float 2;
#X coords 0 1 10 0 403 199 1 0 0;
#X restore 291 361 graph;
#X obj 47 94 osc~ 0.1;
#X obj 46 119 *~ 0.5;
#X obj 46 144 +~ 0.5;
#X obj 112 119 *~ 0.5;
#X obj 112 144 +~ 0.5;
#N canvas 121 146 660 377 set_array 0;
#X obj 121 76 snake~ out 10, f 31;
#X obj 381 77 metro 2;
#X obj 392 35 loadbang;
#X obj 364 35 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 121 116 snapshot~;
#X obj 142 142 snapshot~;
#X obj 167 172 snapshot~;
#X obj 191 200 snapshot~;
#X obj 223 228 snapshot~;
#X obj 220 117 snapshot~;
#X obj 241 143 snapshot~;
#X obj 266 173 snapshot~;
#X obj 290 201 snapshot~;
#X obj 322 229 snapshot~;
#X obj 104 274 pack 1 1 1 1 1 1 1 1 1 1;
#X listbox 104 298 84 0 0 0 - - - 0;
#X obj 121 39 inlet~;
#X obj 96 333 array set \$0-trig_array;
#X connect 0 0 4 0;
#X connect 0 1 5 0;
#X connect 0 2 6 0;
#X connect 0 3 7 0;
#X connect 0 4 8 0;
#X connect 0 5 9 0;
#X connect 0 6 10 0;
#X connect 0 7 11 0;
#X connect 0 8 12 0;
#X connect 0 9 13 0;
#X connect 1 0 4 0;
#X connect 1 0 5 0;
#X connect 1 0 6 0;
#X connect 1 0 7 0;
#X connect 1 0 8 0;
#X connect 1 0 9 0;
#X connect 1 0 10 0;
#X connect 1 0 11 0;
#X connect 1 0 12 0;
#X connect 1 0 13 0;
#X connect 2 0 1 0;
#X connect 3 0 1 0;
#X connect 4 0 14 0;
#X connect 5 0 14 1;
#X connect 6 0 14 2;
#X connect 7 0 14 3;
#X connect 8 0 14 4;
#X connect 9 0 14 5;
#X connect 10 0 14 6;
#X connect 11 0 14 7;
#X connect 12 0 14 8;
#X connect 13 0 14 9;
#X connect 14 0 15 0;
#X connect 15 0 17 0;
#X connect 16 0 0 0;
#X restore 21 258 pd set_array;
#X obj 113 94 osc~ 0.2;
#X obj 212 108 -~ 0.9999;
#X text 289 101 triggers the function when the output of this value is greater than 0, f 38;
#X obj 20 233 rtneural~ 2 10 -1 0;
#X obj 185 278 tgl 30 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X msg 185 313 trigger_mode \$1;
#X text 184 224 trigger mode can be set by a 4th creation argument or a trigger_mode message, f 27;
#X obj 186 164 loadbang;
#X text 101 18 Setting trigger_mode to 1 allows the audio rate function to be triggered by an additional input channel. This allows inference to happen at any sample \, but not every sample., f 73;
#X connect 0 0 1 0;
#X connect 1 0 15 0;
#X connect 2 0 15 0;
#X connect 3 0 15 0;
#X connect 4 0 13 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 8 0 3 0;
#X connect 9 0 10 0;
#X connect 10 0 3 1;
#X connect 12 0 9 0;
#X connect 13 0 3 2;
#X connect 15 0 11 0;
#X connect 16 0 17 0;
#X connect 17 0 15 0;
#X connect 19 0 2 0;
#X restore 15 487 pd trigger_mode;
#N canvas 38 36 795 549 wavetable 0;
#X floatatom 86 187 5 0 0 0 - - - 0;
#X obj 258 32 vsl 19 162 0 1 0 0 empty empty empty 0 -9 0 12 #dfdfdf #000000 #000000 0 1;
#X floatatom 258 203 7 0 0 0 - - - 0;
#X obj 258 228 sig~;
#X obj 96 236 snake~ in 2;
#X obj 96 281 rtneural~ 2 1;
#X obj 96 211 phasor~ 200;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-wavetable_out 4410 float 0;
#X coords 0 1 4409 -1 200 100 1 0 0;
#X restore 117 399 graph;
#X obj 31 479 metro 100;
#X obj 31 453 loadbang;
#X msg 320 203 load_model ../../RTNeural_python/4Osc_MLP_torch/4Osc_torch_RTNeural.json;
#X obj 96 306 output~;
#X obj 320 177 loadbang;
#X text 299 120 This MLP is trained on a variable wavetable oscillator. Adjust the fader to move through the wavetable. All interpolation is done by the neural network., f 62;
#X text 83 166 oscillator frequency;
#X obj 320 265 tgl 30 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X floatatom 320 300 5 0 0 0 - - - 0;
#X msg 320 324 bypass \$1;
#X text 359 274 bypass/engage;
#X obj 31 505 tabwrite~ \$0-wavetable_out;
#X connect 0 0 6 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 1;
#X connect 4 0 5 0;
#X connect 5 0 11 0;
#X connect 5 0 19 0;
#X connect 6 0 4 0;
#X connect 8 0 19 0;
#X connect 9 0 8 0;
#X connect 10 0 5 0;
#X connect 12 0 10 0;
#X connect 15 0 16 0;
#X connect 16 0 17 0;
#X connect 17 0 5 0;
#X restore 36 517 pd wavetable;
#X text 135 517 <-- example using [rtneural~] as a wavetable oscillator;
#X text 135 487 <-- learn about a 4th creation argument: trigger_mode;
#N canvas 32 102 745 588 distortion 0;
#X obj 106 231 osc~ 200;
#X floatatom 46 197 5 0 0 0 - - - 0;
#X obj 221 29 vsl 19 162 0 1 0 0 empty empty empty 0 -9 0 12 #dfdfdf #000000 #000000 0 1;
#X floatatom 221 200 8 0 0 0 - - - 0;
#X obj 221 225 sig~;
#X obj 106 256 snake~ in 2;
#X obj 106 308 rtneural~ 2 1 44100;
#X msg 290 186 load_model ../../RTNeural_python/Automated-GuitarAmpModelling/AmpDistModels/DOD_AmericanMetal_GainKnob_RTNeural.json;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-lstm_dist 4410 float 0;
#X coords 0 1 4409 -1 200 100 1 0 0;
#X restore 124 429 graph;
#X obj 43 509 metro 100;
#X obj 43 484 loadbang;
#X obj 43 534 tabwrite~ \$0-lstm_dist;
#X obj 107 333 output~;
#X obj 290 160 loadbang;
#X obj 290 266 tgl 30 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X floatatom 290 301 5 0 0 0 - - - 0;
#X msg 290 325 bypass \$1;
#X text 329 275 bypass/engage;
#X text 43 176 input sine frequency;
#X text 269 117 this model accepts a second input channel for the distortion effect's gain \, which can be controlled by the fader;
#X connect 0 0 5 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 5 1;
#X connect 5 0 6 0;
#X connect 6 0 11 0;
#X connect 6 0 12 0;
#X connect 7 0 6 0;
#X connect 9 0 11 0;
#X connect 10 0 9 0;
#X connect 13 0 7 0;
#X connect 14 0 15 0;
#X connect 15 0 16 0;
#X connect 16 0 6 0;
#X restore 29 548 pd distortion;
#X text 135 548 <-- example using [rtneural~] as a distortion with gain control, f 63;
#X text 601 219 set whether [rtneural~]'s signal processing is bypassed (if set to 1 \, the input signal is passed through unaffected), f 43;
#X text 16 138 [rtneural~] runs inference from a pre-trained neural net on a multichannel input signal. It accepts three main creation arguments: input channel count \, output channel count \, and sample rate., f 69;
#X msg 602 359 load_model ../../RTNeural_python/Automated-GuitarAmpModelling/AmpDistModels/TS9_HighDrive_RTNeural.json;
#X connect 0 0 3 0;
#X connect 1 0 0 0;
#X connect 2 0 12 0;
#X connect 3 0 9 0;
#X connect 4 0 14 0;
#X connect 4 0 15 0;
#X connect 6 0 8 0;
#X connect 7 0 6 0;
#X connect 9 0 8 0;
#X connect 9 0 17 0;
#X connect 10 0 9 0;
#X connect 11 0 9 0;
#X connect 12 0 11 0;
#X connect 14 0 3 1;
#X connect 15 0 18 1;
#X connect 16 0 18 0;
#X connect 18 0 9 0;
#X connect 29 0 9 0;
