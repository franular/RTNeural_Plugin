#N canvas 136 32 1166 684 12;
#X obj 172 9 vsl 19 162 0 1 0 0 empty empty empty 0 -9 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 197 9 vsl 19 162 0 1 0 0 empty empty empty 0 -9 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 180 221 pack;
#X obj 193 189 t b f;
#X obj 121 333 rtneural 2 10;
#X obj 93 223 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X msg 93 247 bypass \$1;
#N canvas 0 0 450 300 (subpatch) 0;
#X array array10 10 float 2;
#X coords 0 1 10 0 403 199 1 0 0;
#X restore 106 401 graph;
#X obj 121 363 array set array10;
#X msg 582 291 write_json output/rtneural_mlp_control.json;
#X obj 548 320 s to_rtneural;
#X obj 180 247 array set array2;
#X obj 332 225 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#N canvas 845 261 749 370 add_point 1;
#X obj 97 41 inlet;
#X obj 235 217 outlet;
#X listbox 21 128 17 0 0 0 - - - 0;
#X listbox 194 126 22 0 0 0 - - - 0;
#X obj 21 96 array get array2 0 2;
#X obj 194 96 array get array10 0 10;
#X obj 22 160 list prepend add_input;
#X obj 194 156 list prepend add_output;
#X obj 30 195 list trim;
#X obj 204 188 list trim;
#X text 284 21 grabs the current values of input and output arrays and adds them to the vector inside the rtneural object;
#X connect 0 0 4 0;
#X connect 0 0 5 0;
#X connect 2 0 6 0;
#X connect 3 0 7 0;
#X connect 4 0 2 0;
#X connect 5 0 3 0;
#X connect 6 0 8 0;
#X connect 7 0 9 0;
#X connect 8 0 1 0;
#X connect 9 0 1 0;
#X restore 332 253 pd add_point;
#X msg 544 218 set_layers_data 3 relu 5 relu 7 relu 9 relu 10 sigmoid;
#X obj 9 287 r to_rtneural;
#X msg 614 184 set_learn_rate 0.001;
#X text 492 145 set the the training data variables: epochs \, learn_rate \, layers_data, f 73;
#X text 576 268 write the json file for the pytorch training, f 73;
#X msg 332 287 clear_points;
#X msg 332 313 post_points;
#X obj 7 120 array define array2 2;
#X text 310 24 rtneural can load a file using relative paths, f 73;
#X msg 313 58 load_model output/mlp_training_RTNeural.json;
#X msg 496 183 set_epochs 5000;
#X msg 333 340 remove_point 3;
#X text 557 393 to make a new training: \; send a "clear_points" message to clear the internal data points \; set the epochs \, learn_rate \, and layers_data \; bypass the model \; move the inputs and outputs to the desired locations \; press the add_point bang message to add a point \; write the json file \; \; train the model on the command-line as described in RTNeural_python/MLP_control/README.md, f 73;
#X connect 0 0 2 0;
#X connect 1 0 3 0;
#X connect 2 0 4 0;
#X connect 2 0 11 0;
#X connect 3 0 2 0;
#X connect 3 1 2 1;
#X connect 4 0 8 0;
#X connect 5 0 6 0;
#X connect 6 0 4 0;
#X connect 9 0 10 0;
#X connect 12 0 13 0;
#X connect 13 0 4 0;
#X connect 14 0 10 0;
#X connect 15 0 4 0;
#X connect 16 0 10 0;
#X connect 19 0 4 0;
#X connect 20 0 4 0;
#X connect 23 0 10 0;
#X connect 24 0 10 0;
#X connect 25 0 4 0;
