#N canvas 514 125 912 471 12;
#X obj 397 20 vsl 19 162 0 1 0 0 empty empty empty 0 -9 0 12 #dfdfdf #000000 #000000 0 1;
#X obj 422 20 vsl 19 162 0 1 0 0 empty empty empty 0 -9 0 12 #dfdfdf #000000 #000000 0 1;
#X obj 412 215 pack;
#X obj 412 190 t b f;
#X obj 227 293 rtneural 2 10;
#X obj 429 296 tgl 30 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X msg 429 355 bypass \$1;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0-neural_out 10 float 2;
#X coords 0 1 10 0 300 150 1 0 0;
#X restore 27 46 graph;
#X msg 472 231 load_model output/mlp_training_RTNeural.json;
#X text 471 191 Load the model file at the given (relative or absolute) path. The model must satisfy [rtneural]'s channel counts.;
#X text 25 218 [rtneural] runs inference from a pre-trained neural net on an input list. It accepts two creation arguments: input list length and output list length., f 44;
#N canvas 863 85 1032 821 mlp_control 1;
#X msg 494 151 set_learn_rate 0.001;
#X msg 494 69 clear_points;
#X msg 494 126 set_epochs 5000;
#X msg 494 264 bypass 1;
#X obj 494 359 array get \$0-array2;
#X listbox 494 384 20 0 0 0 - - - 0;
#X obj 494 324 bng 30 250 50 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000;
#X listbox 739 384 20 0 0 0 - - - 0;
#X obj 739 433 list trim;
#X obj 739 359 array get \$0-array10;
#X obj 739 408 list prepend add_output;
#X obj 494 408 list prepend add_input;
#X obj 494 433 list trim;
#X text 780 321 add an output set from array10, f 17;
#X msg 494 473 remove_point 3;
#X text 473 510 5) write the configuration to a json file;
#X msg 165 291 post_points;
#X text 164 253 print stored point data to Pd console, f 18;
#X obj 66 352 rtneural 2 10;
#X obj 616 69 s \$0-to_rtneural;
#X obj 472 201 s \$0-to_rtneural;
#X obj 588 433 s \$0-to_rtneural;
#X obj 494 559 s \$0-to_rtneural;
#X obj 66 377 array set \$0-array10;
#N canvas 0 50 450 250 (subpatch) 0;
#X array \$0-array10 10 float 2;
#X coords 0 1 10 0 400 200 1 0 0;
#X restore 40 433 graph;
#N canvas 0 50 450 250 (subpatch) 0;
#X array \$0-array2 2 float 2;
#X coords 0 1 2 0 40 200 1 0 0;
#X restore 40 96 graph;
#X obj 591 264 s \$0-to_rtneural;
#X text 473 300 4) configure input and output data points;
#X text 473 240 3) bypass the model;
#X text 473 102 2) set the the training data variables: epochs \, learn_rate \, layers_data, f 72;
#X text 473 45 1) clear the internal data points;
#X text 552 321 add an input set from array2, f 16;
#X text 416 20 [rtneural] can also be used to make a new training:;
#X obj 66 327 r \$0-to_rtneural;
#X text 611 473 remove the set at index 3 of both input and output;
#X text 473 599 6) finally \, train the configured model via the command line as described in RTNeural_python/MLP_control/README.md (NOTE: this may take a while...), f 75;
#X msg 494 176 set_layers_data 20 relu 20 relu 10 sigmoid;
#X text 475 644 from the RTNeural_python directory in the terminal: 1) make sure you are in a virtual environment as described by RTNeural_python/README.md 2) run 'python MLP_control/mlp_control_train_convert.py -f <your file>' to train the network the file will be saved as <your file without the extension>_RTNeural.json in the same directory as <your file>, f 61;
#X msg 494 534 write_json output/mlp_training.json;
#X connect 0 0 20 0;
#X connect 1 0 19 0;
#X connect 2 0 20 0;
#X connect 3 0 26 0;
#X connect 4 0 5 0;
#X connect 5 0 11 0;
#X connect 6 0 4 0;
#X connect 6 0 9 0;
#X connect 7 0 10 0;
#X connect 8 0 21 0;
#X connect 9 0 7 0;
#X connect 10 0 8 0;
#X connect 11 0 12 0;
#X connect 12 0 21 0;
#X connect 14 0 21 0;
#X connect 16 0 18 0;
#X connect 18 0 23 0;
#X connect 33 0 18 0;
#X connect 36 0 20 0;
#X connect 38 0 22 0;
#X restore 26 397 pd mlp_control;
#X text 471 290 set whether [rtneural]'s processing is bypassed (if set to 1 \, no output values are generated when input values are received), f 52;
#X floatatom 429 331 5 0 0 0 - - - 0;
#X obj 227 318 array set \$0-neural_out;
#X text 470 56 [rtneural] expects an input list of the declared length. The values are controlled by these faders., f 50;
#X text 139 397 <-- learn how to make a new training;
#X connect 0 0 2 0;
#X connect 1 0 3 0;
#X connect 2 0 4 0;
#X connect 3 0 2 0;
#X connect 3 1 2 1;
#X connect 4 0 14 0;
#X connect 5 0 13 0;
#X connect 6 0 4 0;
#X connect 8 0 4 0;
#X connect 13 0 6 0;
